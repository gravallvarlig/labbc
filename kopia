#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <stdbool.h>
#include <ctype.h>

struct Data
{
    char name[50];
    int pnumber;
    int age;
    int gender;
    char program[50];
    char email[50];

};

struct Node
{
    struct Data dt;

    //double data;
    struct Node *next;


}; //* head;

struct Node *head = NULL, *tail = NULL, *k, *students = NULL, *temp = NULL;
//struct Data *headd = NULL, *taild = NULL, *kd, *studentsd = NULL, *tempd = NULL;
//head=head, Node=node, pnumber=data
void create() {
    if (head == NULL) {
        head = (struct Node *) malloc(sizeof(struct Node));
        printf("enter name of Node\n");
        scanf("%s", head->dt.name);
        printf("enter pnumber\n");
        int temp_pnn;
        scanf("%d", &temp_pnn);
        head->dt.pnumber = temp_pnn;
        getchar();
        printf("enter age\n");
        scanf("%d", &temp_pnn);
        head->dt.age = temp_pnn;
        getchar();
        printf(" enter gender | 2 for male | 0 for female | \n");
        scanf("%d", &head->dt.gender);
        getchar();
        printf(" enter program\n");
        scanf("%s", &head->dt.program);
        getchar();
        printf("enter email\n");
        scanf("%s", &head->dt.email);
        getchar();
        //head->dt->name=temp_name;

        head->next = NULL;
        //tail = head;
    }

        /////////////// while head != NULL
    else
    {
        temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = (struct Node *) malloc(sizeof(struct Node));
        printf("enter name of Node\n");
        scanf("%s", temp->next->dt.name);
        printf("enter pnumber\n");
        int temp_pnn, temp_gender;
        scanf("%d", &temp_pnn);
        getchar();
        printf("enter age\n");
        scanf("%d", &temp->next->dt.age);
        getchar();
        printf(" enter gender | 2 for male | 0 for female | \n");
        scanf("%d", &temp_gender);
        temp->next->dt.gender = temp_gender;
        getchar();
        printf(" enter program\n");
        scanf("%s", &temp->next->dt.program);
        getchar();
        printf("enter email\n");
        scanf("%s", &temp->next->dt.email);
        getchar();
        temp->next->dt.pnumber = temp_pnn;
        temp->next->next = NULL;
    }
}


void search()
{
    char pnumberseek[50];
    int flag=0;

    printf("enter the pnumber of Node you wish to search for\n");

    scanf("%s",&pnumberseek);
    getchar();
    //fgets(pnumberseek, 50, stdin);

    struct Node *t;
    t=head;
    while(t!=NULL)
    {   // my changes starts from here ...
        char temp_str[50];

        sprintf(temp_str, "%d", t->dt.pnumber); // converting the personal number from int to str.
        puts(temp_str);

        //printf("the personal number (converted) for t is %s \n",  temp_str );
        //printf("the personal number (typed in) is %s \n", pnumberseek );

        if (strcmp(pnumberseek, temp_str) == 0) // Previously you were comparing a int with a str.
            //if (strcmp(pnumberseek, t->pnumber) == 0) //this is the line that crashes both in Clion IDE and Xcode Ide.
        {
            printf("Node named %s was found\n", t->dt.name);
            flag = 1;
            break;
        }
        else{printf("the output of strcmp is %d \n", strcmp(pnumberseek, temp_str) );

        }

        t = t->next;
    }
    if (flag == 0)
        printf("pnumber was not found\n");
}

void searchname()
{
    char nameseek[50];
    int flag=0;

    printf("enter the name of the node you wish to search for\n");

    scanf("%s", &nameseek);
    getchar();

    struct Node *t;
    t=head;
    while(t!=NULL)
    {   // my changes starts from here ...
        char temp_str[50];

        sprintf(temp_str, "%s", t->dt.name); // converting the personal number from int to str.
        puts(temp_str);

        //printf("the personal number (converted) for t is %s \n",  temp_str );
        //printf("the personal number (typed in) is %s \n", pnumberseek );

        if (strcmp(nameseek, temp_str) == 0) // Previously you were comparing a int with a str.
            //if (strcmp(pnumberseek, t->pnumber) == 0) //this is the line that crashes both in Clion IDE and Xcode Ide.
        {
            printf("Node with pnumber %d was found\n", t->dt.pnumber);
            flag = 1;
            break;
        }
        else{printf("the output of strcmp is %d \n", strcmp(nameseek, temp_str) );

        }

        t = t->next;
    }
    if (flag == 0)
        printf("name was not found\n");
}

void statistic()
{
    double agetot = 0, agetemp;
    int count = 0, countmale = 0, countfemale = 0, loop = 0;
    char temp_program[50];
    struct Node *t, *temp;
    t = head;
    //temp = head;

    while (t != NULL)
    {
        count = count + 1;
        agetemp = t->dt.age;
        agetot = agetemp + agetot;

        if (t->dt.gender == 0) {
            ++countfemale;
        } else {
            ++countmale;
        }

        t = t->next;
    }
    printf("     |Total number of students | %d \n", count);
    printf("\n");
    printf("     |average age of students  | %lf \n", agetot / count);
    printf("\n");
    printf("     |number of male students  | %d\n", countmale);
    printf("\n");
    printf("     |number of female students| %d\n", countfemale);
    printf("\n");
    loop = 1;

    int i, studentcount = 0, malecount = 0, femalecount = 0;


//    t = head;
//    while (loop == 1)
//    {
//        sprintf(temp_program, "%s", t->dt.program);
//        while (t != NULL)
//        {
//            if (strcmp(temp_program, t->dt.program) == 0)
//            {
//                ++studentcount;
//                if (t->dt.gender == 0)
//                {
//                    ++femalecount;
//                }
//                else
//                {
//                    ++malecount;
//                }
//                t = t->next;
//            }
//            else
//            {
//                loop = 3;
//            }
//        }
//        printf("| the statistics for %s |\n", temp_program);
//
//        printf(" number of students %d |\n number of male students %d |\n number of female students %d |\n",
//               studentcount, malecount, femalecount);
//
//    }
}

struct Node *writetofile(struct Data *head, FILE **filestream)
{
    temp = head;
    while (temp != NULL)
    {
        //fwrite(&(temp), 1, sizeof(struct Data), *filestream);
        fwrite(&(temp->dt.pnumber), sizeof(temp->dt.pnumber), 1, *filestream);
        fwrite(&temp->dt.name, sizeof(temp->dt.name), 1, *filestream);
        fwrite(&(temp->dt.gender), sizeof(temp->dt.gender), 1, *filestream);
        fwrite(&temp->dt.program, sizeof(temp->dt.program), 1, *filestream);
        fwrite(&(temp->dt.age), sizeof(temp->dt.age), 1, *filestream);
        fwrite(&temp->dt.email, sizeof(temp->dt.email), 1, *filestream);

        temp = temp->next;
    }
}

void stats()
{
    int mcounter=0, fcounter=0, temp, agetemp, i=0, counter=0, flag = 0, found=0, male, female, pcounter=0;
    char donep[50][50];
    char progtemp[50];

    struct Node *t;
    t=head;

    while (t != NULL)
    {
        counter++;
        t=t->next;
    }

    for (i = 0; i < 50; i++)
    {
        strcpy(donep[i], "");
    }

    //test = sizeof(struct Node / )

    t = head;
    while (t != NULL)
    {
        for (i=0; i<counter; i++)
        {
            if (strcmp(donep[i], t->dt.program) == 0)
            {
                flag = 1;
            }
        }

        if (flag == 0)
        {
            for (i = 0; i < counter; i++)
            {
                if (strcmp(donep[i], "") == 0)
                {
                    found = i;
                    break;
                }
            }

            strcpy(donep[found], t->dt.program);
            pcounter++;
        }

        flag = 0;
        t = t->next;

    }

//    printf("programs\n");
//    for (i = 0; i < counter; i++)
//    {
//        if (strcmp(donep[i], "") != 0)
//        {
//            puts(donep[i]);
//        }
//    }
    t = head;

    for (i = 0; i < pcounter; i++)
    {
        printf("\n");
        printf("Current program: \n");
        puts(donep[i]);

        while (t != NULL)
        {
            if (strcmp(donep[i], t->dt.program) == 0)
            {

                if (t->dt.gender == 2)
                {
                    mcounter++;
                }

                if (t->dt.gender == 0)
                {
                    fcounter++;
                }

                //agesum += head->age;
            }
            t = t->next;



        }
        //ageresult = agesum / counter;

        printf("Number of female students in program %d\n", fcounter);
        printf("Number of male students in program %d\n", mcounter);
        // Print all results and reset variables for next iteration
        //printf("Number of students in program %d\n", totalstudents);

        //printf("Average age of students in program %d\n", ageresult);

        //totalstudents = 0;
        fcounter = 0;
        mcounter = 0;
        //agesum = 0;
        //ageresult = 0;
        t = head;
        printf("\n");
    }
}




void modify()
{
    char pnumberseek[50];
    int flag = 0;

    printf("enter the pnumber of Node you wish to search for\n");

    scanf("%s", &pnumberseek);
    getchar();
    //fgets(pnumberseek, 50, stdin);

    struct Node *t;
    t = head;
    while (t != NULL)
    {   // my changes starts from here ...
        char temp_str[50];

        sprintf(temp_str, "%d", t->dt.pnumber); // converting the personal number from int to str.
        puts(temp_str);

        //printf("the personal number (converted) for t is %s \n", temp_str);
        //printf("the personal number (typed in) is %s \n", pnumberseek);

        if (strcmp(pnumberseek, temp_str) == 0) // Previously you were comparing a int with a str.
            //if (strcmp(pnumberseek, t->pnumber) == 0) //this is the line that crashes both in Clion IDE and Xcode Ide.
        {
            printf("Node named %s was found\n", t->dt.name);
            printf("enter new name\n");
            scanf("%s", &t->dt.name);
            getchar();
            printf("enter new pnumber\n");
            scanf("%d", &t->dt.pnumber);
            getchar();
            flag = 1;
            break;
        } else {
            printf("the output of strcmp is %d \n", strcmp(pnumberseek, temp_str));
        }

        t = t->next;
    }
    if (flag == 0)
    {
        printf("pnumber was not found\n");
    }
}

void studyp_stat()
{
    char studyseek[50];
    int flag=0;

    printf("enter the name of the program you wish to search for\n");

    scanf("%s", &studyseek);
    getchar();

    struct Node *t;
    t=head;
    printf(" students in %s\n", studyseek);
    while(t!=NULL)
    {
        char temp_str[50];



        if (strcmp(studyseek, t->dt.program) == 0)
        {
            printf("| %s |  | %d |\n", t->dt.name, t->dt.pnumber);

        }
        t = t->next;


    }
}


void printstudent()
{
    struct Node *t;
    t = head;
    while (t != NULL)
    {
        printf("\n");
        printf("Name %s\n", t->dt.name);
        printf("pnumber %d\n", t->dt.pnumber);
        printf("age %d\n", t->dt.age);
        if ( t->dt.gender == 0)
        {
            printf("female\n");
        }
        else
        {
            printf("male\n");
        }

        printf("\n");
        t = t->next;

    }
    printf("\n");

}


void deletefirstnode() // old delete function
{
    struct Node *toDelete;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        toDelete = head;
        head = head->next;

        printf("\nData deleted = %d\n", toDelete->dt);


        free(toDelete);

        printf("SUCCESSFULLY DELETED FIRST NODE FROM LIST\n");
    }
}

void delete() // working delete function
{
    if (head == NULL)
    {
        printf("List is already empty\n");
    }
    else
        {
        int pnumberseek;
        int flag = 0;
        struct Node *t, *toDelete, *prevNode;

        t = head;
        toDelete = head;
        prevNode = head;

        printf("enter pnumber\n");

        scanf("%d", &pnumberseek);

        if (pnumberseek == head->dt.pnumber) {
            toDelete = head;
            head = head->next;

            printf("\nData deleted = %d\n", toDelete->dt);

            /* Clears the memory occupied by first node*/
            free(toDelete);

            printf("Deletion was succesfull\n");
        }
        else
            {
            while (t != NULL)
            {   // my changes starts from here ...
                char temp_str[50];
                char temptemp[50];
                prevNode = toDelete;
                toDelete = toDelete->next;
                sprintf(temp_str, "%d", toDelete->dt.pnumber); // converting the personal number from int to str.
                puts(temp_str);


                //printf("the personal number (converted) for t is %s \n", temp_str);
                //printf("the personal number (typed in) is %s \n", pnumberseek);
                if (toDelete->dt.pnumber == pnumberseek)
                    //if (strcmp(pnumberseek, temp_str) == 0) // Previously you were comparing a int with a str.
                    //if (strcmp(pnumberseek, t->pnumber) == 0) //this is the line that crashes both in Clion IDE and Xcode Ide.
                {
                    printf("Node named %s was found\n", toDelete->dt.name);
                    prevNode->next = toDelete->next;

                    /* Delete nth node */
                    free(toDelete);

                    printf("Succesfully deleted selected node\n");

                    t = t->next;

                }
            }
        }
    }
}


void test()
{
    struct Data *flip;
    int flap, fluup;

    flip = head;
    flap = head->dt.pnumber;
    printf("%d", flap);
    fluup = flap + flap;
    printf("%d", fluup);
    //printf("%s", head->dt.pnumber);
}



void read2()
{
    //struct Node *students;
    char databasefilename[50];
    double sizeoffile;
    double alldataread = 0, timeslooped = 0;
    double inputnumber, amountofdataread = 0, amountofdatareadtemp = 0;
    int ptest, gtest, atest;
    char ntest[50], etest[50], pgtest[50];
    printf("");
    printf("enter filename\n");
    scanf("%s", &databasefilename);
    strcat(databasefilename, ".dat");
    FILE *studentfile;

    studentfile = fopen(databasefilename, "rb+");
    if (studentfile == NULL)
    {
        fprintf(stderr, "Error opening file\n");
    }

    fseek(studentfile, 0, SEEK_END);
    sizeoffile = ftell(studentfile);
    rewind(studentfile);

    //temp = head;
    //students = NULL;
    //temp = NULL;
    //temp = head;

    while (alldataread==0)
    {
        if (head == NULL)
        {
            //students = head;
            head = (struct Data *) malloc(sizeof(struct Data));
            //fread(&(head->dt), sizeof(head->dt), 1, studentfile);

            fread(&head->dt.pnumber, sizeof(head->dt.pnumber), 1, studentfile);
            fread(head->dt.name, sizeof(head->dt.name), 1, studentfile);
            fread(&head->dt.gender, sizeof(head->dt.gender), 1, studentfile);
            fread(head->dt.program, sizeof(head->dt.program), 1, studentfile);
            fread(&head->dt.age, sizeof(head->dt.age), 1, studentfile);
            fread(head->dt.email, sizeof(head->dt.email), 1, studentfile);

            printf("Name of student being read: ");
            puts(head->dt.name);

            head->next=NULL;
        }
        else
        {
            temp = head;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }

            //temp = temp->next;
            temp->next = (struct Node *) malloc(sizeof(struct Node));
            //fread(&(temp->dt), sizeof(temp->dt), 1, studentfile);

//            fread(&temp->dt.pnumber, sizeof(temp->dt.pnumber), 1, studentfile);
//            fread(temp->dt.name, sizeof(temp->dt.name), 1, studentfile);
//            fread(&temp->dt.gender, sizeof(temp->dt.gender), 1, studentfile);
//            fread(temp->dt.program, sizeof(temp->dt.program), 1, studentfile);
//            fread(&temp->dt.age, sizeof(temp->dt.age), 1, studentfile);
//            fread(temp->dt.email, sizeof(temp->dt.email), 1, studentfile);

            fread(&ptest, sizeof(temp->dt.pnumber), 1, studentfile);
            fread(ntest, sizeof(temp->dt.name), 1, studentfile);
            fread(&gtest, sizeof(temp->dt.gender), 1, studentfile);
            fread(pgtest, sizeof(temp->dt.program), 1, studentfile);
            fread(&atest, sizeof(temp->dt.age), 1, studentfile);
            fread(etest, sizeof(temp->dt.email), 1, studentfile);

            temp->next->dt.pnumber=ptest;
            strcpy(temp->next->dt.name,ntest);
            temp->next->dt.gender=gtest;
            strcpy(temp->next->dt.program,pgtest);
            temp->next->dt.age=atest;
            strcpy(temp->next->dt.email,etest);

            printf("Name of student being read: ");
            puts(temp->next->dt.name);

            temp->next->next = NULL;


            //temp=temp->next;

        }

        ++timeslooped;
        amountofdatareadtemp = (sizeof(head->dt.pnumber) + sizeof(head->dt.name) + sizeof(head->dt.gender) + sizeof(head->dt.program) + sizeof(head->dt.age) + sizeof(head->dt.email));
        amountofdataread = amountofdataread + amountofdatareadtemp;
        printf("amount of dataread: %lf / %lf\n", amountofdataread, sizeoffile);


        if (amountofdataread == sizeoffile) // If all data was successfully read...
        {
            alldataread = 1;
        }
    }

    fclose(studentfile);
}


int main ()
{
    //printf("the head looks like %p \n", head);
    int testif, choice=1, test;
    char databasefilename[50];
    double sizeoffile = 0;
    while(choice !=0)
    {
        printf("MENU\n");
        printf("1: Add nodes\n");
        printf("2: Modify database\n");
        printf("3: Delete post in database\n");
        printf("4: Search for Node in database\n");
        printf("5: Save database to file\n");
        printf("6: Load database from file\n");
        printf("7: Exit\n");

        //printf("the head looks like %p \n", head);

        printf("Enter choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
                create();
                choice=1;
                break;
            case 2:
                modify();
                break;
            case 3:
                delete();
                break;
            case 4:
                printf("Choose option \n1. search for pnumber\n2. search for name\n3. search for program\n4. statistics\n5. Display nodes\n");
                scanf("%d", &testif);
                if (testif==1)
                {
                    search();
                    break;
                }
                if (testif==2)
                {
                    searchname();
                    break;
                }
                if (testif==3)
                {
                    studyp_stat();
                    break;
                }
                if (testif==4)
                {
                    statistic();
                    stats();
                    break;
                }
                if (testif==5)
                {
                    printstudent();
                    break;
                }
                else
                    break;
            case 5:
                printf("\n");
                printf("enter filename for database \n");
                getchar();
                fgets(databasefilename, 50, stdin);
                databasefilename[strlen(databasefilename) - 1] = '\0';
                strcat(databasefilename, ".dat");

                FILE *studentdb = fopen(databasefilename, "wb+");

                rewind(studentdb);

                writetofile(head, &studentdb); // Writes the info of every student to file

                if (fwrite != 0) // If the file could be written successfully
                {
                    printf("content written succesfully\n");
                }

                fseek(studentdb, 0, SEEK_END);
                sizeoffile = ftell(studentdb);
                rewind(studentdb);

                fclose(studentdb); // End stream
                break;
            case 6:
//                test = sizeof(struct Data);
//                printf("%d", test);
                read2();
                break;
            case 7:
                printf("Stopping program\n");
                exit(0);
                break;
            default:
                printf("invalid choice\n");

        }

    }

    return 0;

}
