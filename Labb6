#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <ctype.h>

struct Data
{
    char name[50];
    double pnumber;
    int age;
    int gender;
    char program[50];
    char email[50];

};

struct Node
{
    struct Data dt;

    //double data;
    struct Node *next;


};

struct Node *head = NULL, *tail = NULL, *temp = NULL;

void create()
{
    if (head == NULL)
    {
        head = (struct Node *) malloc(sizeof(struct Node));
        printf("enter name of student\n");
        scanf("%s", head->dt.name);
        printf("enter pnumber\n");
        double temp_pnn;
        scanf("%lf", &temp_pnn);
        head->dt.pnumber = temp_pnn;
        getchar();
        int temp_age;
        printf("enter age\n");
        scanf("%d", &temp_age);
        head->dt.age = temp_age;
        getchar();
        printf(" enter gender | 2 for male | 0 for female | \n");
        scanf("%d", &head->dt.gender);
        getchar();
        printf(" enter program\n");
        scanf("%s", &head->dt.program);
        getchar();
        printf("enter email\n");
        scanf("%s", &head->dt.email);
        getchar();

        head->next = NULL;
    }

    else
    {
        temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = (struct Node *) malloc(sizeof(struct Node));
        printf("enter name of student\n");
        scanf("%s", temp->next->dt.name);
        printf("enter pnumber\n");
        int temp_age, temp_gender;
        double temp_pnn;
        scanf("%lf", &temp_pnn);
        getchar();
        printf("enter age\n");
        scanf("%d", &temp->next->dt.age);
        getchar();
        printf(" enter gender | 2 for male | 0 for female | \n");
        scanf("%d", &temp_gender);
        temp->next->dt.gender = temp_gender;
        getchar();
        printf(" enter program\n");
        scanf("%s", &temp->next->dt.program);
        getchar();
        printf("enter email\n");
        scanf("%s", &temp->next->dt.email);
        getchar();
        temp->next->dt.pnumber = temp_pnn;
        temp->next->next = NULL;
    }
}


void search()
{
    double pseek1, pseek2;
    int flag=0;

    printf("enter the pnumber of student you wish to search for\n");

    scanf("%lf",&pseek1);
    getchar();

    struct Node *t;
    t=head;
    while(t!=NULL)
    {
        pseek2=t->dt.pnumber;

        if (pseek1 == pseek2)
        {
            printf("Student named %s was found\n", t->dt.name);
            flag = 1;
            break;
        }


        t = t->next;
    }
    if (flag == 0)
        printf("pnumber was not found\n");
}

void searchname()
{
    char nameseek[50];
    int flag=0;

    printf("enter the name of the student you wish to search for\n");

    scanf("%s", &nameseek);
    getchar();

    struct Node *t;
    t=head;
    while(t!=NULL)
    {
        char temp_str[50];

        sprintf(temp_str, "%s", t->dt.name);
        puts(temp_str);

        if (strcmp(nameseek, temp_str) == 0)
        {
            printf("Student with pnumber %lf was found\n", t->dt.pnumber);
            flag = 1;
            break;
        }
        else
        {
            printf("the output of strcmp is %d \n", strcmp(nameseek, temp_str) );
        }

        t = t->next;
    }
    if (flag == 0)
        printf("name was not found\n");
}

void statistic()
{
    double agetot = 0, agetemp;
    int count = 0, countmale = 0, countfemale = 0, loop = 0;
    struct Node *t, *temp;
    t = head;

    while (t != NULL)
    {
        count = count + 1;
        agetemp = t->dt.age;
        agetot = agetemp + agetot;

        if (t->dt.gender == 0) {
            ++countfemale;
        } else {
            ++countmale;
        }

        t = t->next;
    }
    printf("     |Total number of students | %d \n", count);
    printf("\n");
    printf("     |average age of students  | %lf \n", agetot / count);
    printf("\n");
    printf("     |number of male students  | %d\n", countmale);
    printf("\n");
    printf("     |number of female students| %d\n", countfemale);
    printf("\n");
    loop = 1;

}

struct Node *writetofile(struct Data *head, FILE **filestream)
{
    temp = head;
    while (temp != NULL)
    {
        fwrite(&(temp->dt.pnumber), sizeof(temp->dt.pnumber), 1, *filestream);
        fwrite(&temp->dt.name, sizeof(temp->dt.name), 1, *filestream);
        fwrite(&(temp->dt.gender), sizeof(temp->dt.gender), 1, *filestream);
        fwrite(&temp->dt.program, sizeof(temp->dt.program), 1, *filestream);
        fwrite(&(temp->dt.age), sizeof(temp->dt.age), 1, *filestream);
        fwrite(&temp->dt.email, sizeof(temp->dt.email), 1, *filestream);

        temp = temp->next;
    }
}

void stats()
{
    int mcounter=0, fcounter=0, temp, agecounter=0, i=0, counter=0, flag = 0, found=0, pcounter=0, totstud=0;
    double agetot;
    char donep[50][50];
    char progtemp[50];

    struct Node *t;
    t=head;

    while (t != NULL)
    {
        counter++;
        t=t->next;
    }

    for (i = 0; i < 50; i++)
    {
        strcpy(donep[i], "");
    }

    t = head;
    while (t != NULL)
    {
        for (i=0; i<counter; i++)
        {
            if (strcmp(donep[i], t->dt.program) == 0)
            {
                flag = 1;
            }
        }

        if (flag == 0)
        {
            for (i = 0; i < counter; i++)
            {
                if (strcmp(donep[i], "") == 0)
                {
                    found = i;
                    break;
                }
            }

            strcpy(donep[found], t->dt.program);
            pcounter++;
        }

        flag = 0;
        t = t->next;

    }

    t = head;

    for (i = 0; i < pcounter; i++)
    {
        printf("\n");
        printf("Current program: \n");
        puts(donep[i]);

        while (t != NULL)
        {
            if (strcmp(donep[i], t->dt.program) == 0)
            {

                if (t->dt.gender == 2)
                {
                    mcounter++;
                }

                if (t->dt.gender == 0)
                {
                    fcounter++;
                }

                agetot = agetot + t->dt.age;
                agecounter++;

            }
            t = t->next;



        }

        agetot = agetot/agecounter;
        totstud = mcounter + fcounter;


        printf("Number of students in program %d\n", totstud);
        printf("Number of female students in program %d\n", fcounter);
        printf("Number of male students in program %d\n", mcounter);
        printf("Average age of students in program %lf\n", agetot);

        totstud = 0;
        fcounter = 0;
        mcounter = 0;
        agetot = 0;
        agecounter= 0;

        t = head;
        printf("\n");
    }
}




void modify()
{
    double pseek1, pseek2;
    int flag = 0;

    printf("enter the pnumber of student you wish to search for\n");

    scanf("%lf", &pseek1);


    struct Node *t;
    t = head;
    while (t != NULL)
    {
        pseek2=t->dt.pnumber;

        if (pseek1==pseek2)
        {
            printf("Student named %s was found\n", t->dt.name);
            printf("enter new name\n");
            scanf("%s", &t->dt.name);
            getchar();
            printf("enter new pnumber\n");
            scanf("%lf", &t->dt.pnumber);
            getchar();
            flag = 1;
            break;
        }

        t = t->next;
    }
    if (flag == 0)
    {
        printf("pnumber was not found\n");
    }
}

void studyp_stat()
{
    char studyseek[50];
    int flag=0;

    printf("enter the name of the program you wish to search for\n");

    scanf("%s", &studyseek);
    getchar();

    struct Node *t;
    t=head;
    printf(" students in %s\n", studyseek);
    while(t!=NULL)
    {

        if (strcmp(studyseek, t->dt.program) == 0)
        {
            printf("| %s |  | %lf |\n", t->dt.name, t->dt.pnumber);

        }
        t = t->next;


    }
}


void printstudent()
{
    struct Node *t;
    t = head;
    while (t != NULL)
    {
        printf("\n");
        printf("Name %s\n", t->dt.name);
        printf("Personal number %lf\n", t->dt.pnumber);
        printf("age %d\n", t->dt.age);
        if ( t->dt.gender == 0)
        {
            printf("female\n");
        }
        else
        {
            printf("male\n");
        }

        printf("\n");
        t = t->next;

    }
    printf("\n");

}

void delete() // working delete function
{
    if (head == NULL)
    {
        printf("List is already empty\n");
    }
    else
    {
        double pnumberseek;
        int flag = 0;
        struct Node *t, *toDelete, *prevNode;

        t = head;
        toDelete = head;
        prevNode = head;

        printf("enter pnumber\n");

        scanf("%lf", &pnumberseek);

        if (pnumberseek == head->dt.pnumber) {
            toDelete = head;
            head = head->next;

            printf("\nData deleted = %d\n", toDelete->dt);

            free(toDelete);

            printf("Deletion was succesfull\n");
        }
        else
        {
            while (t != NULL)
            {
                char temp_str[50];
                prevNode = toDelete;
                toDelete = toDelete->next;
                sprintf(temp_str, "%lf", toDelete->dt.pnumber);
                puts(temp_str);



                if (toDelete->dt.pnumber == pnumberseek)

                {
                    printf("Student named %s was found\n", toDelete->dt.name);
                    prevNode->next = toDelete->next;

                    free(toDelete);

                    printf("Succesfully deleted selected student\n");

                    t = t->next;

                }
            }
        }
    }
}

void read2()
{
    char databasefilename[50];
    double sizeoffile;
    double alldataread = 0, timeslooped = 0;
    double inputnumber, amountofdataread = 0, amountofdatareadtemp = 0;
    int gtest, atest;
    double ptest;
    char ntest[50], etest[50], pgtest[50], confirm;
    printf("");
    printf("enter filename\n");
    scanf("%s", &databasefilename);
    strcat(databasefilename, ".dat");
    FILE *studentfile;

    studentfile = fopen(databasefilename, "rb+");
    if (studentfile == NULL)
    {
        fprintf(stderr, "Error opening file\n");
    }

    fseek(studentfile, 0, SEEK_END);
    sizeoffile = ftell(studentfile);
    rewind(studentfile);

    while (alldataread==0)
    {
        if (head == NULL)
        {
            head = (struct Node *) malloc(sizeof(struct Node));

            fread(&head->dt.pnumber, sizeof(head->dt.pnumber), 1, studentfile);
            fread(head->dt.name, sizeof(head->dt.name), 1, studentfile);
            fread(&head->dt.gender, sizeof(head->dt.gender), 1, studentfile);
            fread(head->dt.program, sizeof(head->dt.program), 1, studentfile);
            fread(&head->dt.age, sizeof(head->dt.age), 1, studentfile);
            fread(head->dt.email, sizeof(head->dt.email), 1, studentfile);

            printf("Name of student being read: ");
            puts(head->dt.name);

            head->next=NULL;
        }
        else
        {
            temp = head;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }

            temp->next = (struct Node *) malloc(sizeof(struct Node));


            fread(&ptest, sizeof(temp->dt.pnumber), 1, studentfile);
            fread(ntest, sizeof(temp->dt.name), 1, studentfile);
            fread(&gtest, sizeof(temp->dt.gender), 1, studentfile);
            fread(pgtest, sizeof(temp->dt.program), 1, studentfile);
            fread(&atest, sizeof(temp->dt.age), 1, studentfile);
            fread(etest, sizeof(temp->dt.email), 1, studentfile);

            temp->next->dt.pnumber=ptest;
            strcpy(temp->next->dt.name,ntest);
            temp->next->dt.gender=gtest;
            strcpy(temp->next->dt.program,pgtest);
            temp->next->dt.age=atest;
            strcpy(temp->next->dt.email,etest);

            printf("Name of student being read: ");
            puts(temp->next->dt.name);

            temp->next->next = NULL;

        }

        ++timeslooped;
        amountofdatareadtemp = (sizeof(head->dt.pnumber) + sizeof(head->dt.name) + sizeof(head->dt.gender) + sizeof(head->dt.program) + sizeof(head->dt.age) + sizeof(head->dt.email));
        amountofdataread = amountofdataread + amountofdatareadtemp;
        printf("amount of dataread: %lf / %lf\n", amountofdataread, sizeoffile);


        if (amountofdataread == sizeoffile)
        {
            alldataread = 1;
        }
    }

    fclose(studentfile);

}


int main ()
{
    int testif, choice=1, test, charre;
    char databasefilename[50];
    double sizeoffile = 0;
    while(choice !=0)
    {
        printf("MENU\n");
        printf("1: Add students\n");
        printf("2: Modify database\n");
        printf("3: Delete post in database\n");
        printf("4: Search for student in database\n");
        printf("5: Save database to file\n");
        printf("6: Load database from file\n");
        printf("7: Exit\n");


        printf("Enter choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
                create();
                choice=1;
                break;
            case 2:
                modify();
                break;
            case 3:
                delete();
                break;
            case 4:
                printf("Choose option \n1. search for pnumber\n2. search for name\n3. search for program\n4. statistics\n5. Display students\n");
                scanf("%d", &testif);
                if (testif==1)
                {
                    search();
                    break;
                }
                if (testif==2)
                {
                    searchname();
                    break;
                }
                if (testif==3)
                {
                    studyp_stat();
                    break;
                }
                if (testif==4)
                {
                    statistic();
                    stats();
                    break;
                }
                if (testif==5)
                {
                    printstudent();
                    break;
                }
                else
                    break;
            case 5:
                printf("\n");
                printf("enter filename for database \n");
                getchar();
                fgets(databasefilename, 50, stdin);
                databasefilename[strlen(databasefilename) - 1] = '\0';
                strcat(databasefilename, ".dat");

                FILE *studentdb = fopen(databasefilename, "wb+");

                rewind(studentdb);

                writetofile(head, &studentdb);

                if (fwrite != 0)
                {
                    printf("content written succesfully\n");
                }

                fseek(studentdb, 0, SEEK_END);
                sizeoffile = ftell(studentdb);
                rewind(studentdb);

                fclose(studentdb);
                break;
            case 6:
                printf("Existing database will be overwritten, enter 1 to continue or 0 to exit\n");
                scanf("%d", &charre);
                getchar();
                if( charre == 1)
                {
                    read2();
                }
                if ( charre == 0)
                {
                    printf("Exiting\n");
                    break;
                }
                else
                {
                    printf("Invalid option\n");
                }

                break;
            case 7:
                printf("Stopping program\n");
                exit(0);
                break;
            default:
                printf("invalid choice\n");

        }

    }

    return 0;
}
